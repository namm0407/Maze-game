#include "searchAndStoreMaze.h"

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
using namespace std;

// function to search for desired maze layout and store in maze vector; 
// takes in maze vector by reference, and maze number generated by mazeSelection
// returns nothing
void searchAndStoreMaze(vector<vector<string>> & maze, int mazeNum, int &movesLeft){
    // open maze layout file
    ifstream fin("mazeLayout.txt");
    if (fin.fail()){
        cout << "Error in opening mazeLayout.txt" << endl;
        exit(1);
    }

    // read lines until desired maze is found
    string line;
    while (getline(fin, line)){ 
        
        if ((line.substr(0, 11)=="MAZE LAYOUT")){
            // Get everything after "MAZE LAYOUT"
            string numberPart;
            if (line.size() > 12) {
                numberPart = line.substr(12);
            } else {
                cout << "Error: Line is too short to extract number." << endl;
                continue; // Skip processing this line
            } 
            
            istringstream iss(numberPart);
            int currentNum;
            
            if (!(iss >> currentNum)) {
                cout << "Error: Failed to parse maze number from part: " << numberPart << endl; //debug
                cout << "Error: Failed to extract maze number." << endl;
                continue;
            }

            // desired maze found
            if (currentNum==mazeNum && maze.empty()){
                vector<string> tempMazeRow;
                for (int i=0; i<14; i++){
                    if (!getline(fin, line)) {
                        cout << "Error: Missing rows in maze layout." << endl;
                        break;
                    }
                    
                    //getline(fin, line);
                    // skip the first row
                    if (i == 0) continue;

                    if (i==12){
                        // added by Sally Po
                        // Read the minimum steps
                        // adjusted by Hadrien Ng
                        if (line.find("Min Step:") != string::npos) {
                            istringstream minStepLine(line);
                            string temp;
                            if (!(minStepLine >> temp >> temp >> movesLeft)) {
                                cout << "Error: Failed to parse Min Step." << endl;
                            }
                        } else {
                            cout << "Error: 'Min Step:' not found in line." << endl;
                        }
                        return;
                    }

                    if (line.size() < 23) {
                        cout << "Error: Line too short for maze row: " << line << endl;
                        continue;
                    }

                    for(int j=0; j<21; j++){
                        if (line.size() >= j + 3) {
                            tempMazeRow.push_back(line.substr(j + 2, 1));
                        } else {
                            cout << "Error: Line too short for substring extraction at index " << j + 2 << endl;
                            tempMazeRow.push_back(" ");
                        }
                    }
                    maze.push_back(tempMazeRow);
                    tempMazeRow.clear();
                }    
            }
        }
    }
    cout << "Error: Maze number " << mazeNum << " not found." << endl;
    fin.close();
}
